#include <stdio.h>
#include <GL/glew.h>
#include <GLFW/glfw3.h>

//Variáveis globais (tamanho e largura)
const GLint WIDTH = 800, HEIGHT = 600;
GLuint VAO, VBO, shaderProgram; //inteiro não sinalizado, vamos guardar o VAO e o VBO, e qual programa está rodando (shader)
//VAO ESPAÇO DE MENÓRIA DENTRO DE UM VAO TEM VARIOS VBOS; VBOS DADOS QUE DEFINEM (PONTOS,CORES,ETC) O SHADER, SHADERPROGRAM CÓDIGO DO NOSSO PROGRAMA (TRIANGULO), QUANDO TIVER VARIOS OBJETOS TERÃO VARIOS PROGRAMAS


//Código GLSL (LINGUAGEM DE PROGRAMAÇÃO P/ OPENGL PARECE COM C)
//GL_POSITION VAI ESTAR DENTRO DE UM VBO, POR EXEMPLO (POSIÇÃO DE 1 PONTO)

static const char* vertexShader = "           \n\
#version 330                                  \n\
                                              \n\
layout(location=0) in vec2 pos;               \n\
                                              \n\
void main() {                                 \n\
   gl_position = vec4(pos.x,pos.y, 0.0, 1.0); \n\
}                                             \n\
";

//FRAGMENT PRODUÇÃO DE UMA COR, UNIFORM UMA ENTRADA EM TEMPO DE EXECUÇÃO, NUNCA VAI SER EXECUTADO LOGO QUANDO INSTANCIADO, É RENDERIZADO EM TEMPO DE EXECUÇÃO OU SEJA QUANDO A COR DO OBJETO MUDAR
//VETOR DE 4 POSIÇÕES RGB
static const char* fragmentShader = "          \n\
#version 330                                   \n\
                                               \n\
uniform vec3 triColor;                         \n\
out vec4 color;								   \n\
                                               \n\
void main() {                                  \n\
	                                           \n\
   color = vec4(triColor,1.0);                 \n\
}                                              \n\
";

void criaTriangulo() {
	GLfloat vertices[] = { //Verices do triangulo
		0.0f, 1.0f, //Vertice 1 (0 no eixo x e 1 no ponto y)
		-1.0f,-1.0f, //Vertice 2
		1.0f,-1.0f //Vertice 3
	};

	glGenVertexArrays(1, &VAO);  
	glBindVertexArray(VAO); //Aponte para o endereço que acabou de criar
		
		glGenBuffers(1, &VBO);
		glBindBuffer(GL_ARRAY_BUFFER, VBO);
			
		glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 0, 0);
		glEnableVertexAttribArray(0); //Location

		glBindBuffer(GL_ARRAY_BUFFER, 0);
	glBindVertexArray(0);
}

void adicionaTriangulo(GLuint program, const char* shaderCode, GLenum type) {
	GLuint _shader = glCreateShader(type); //Crio shader

	//Converte char para GL_CHAR
	const GLchar* code[1];
	code[0] = shaderCode; //Código fonte

	glShaderSource(_shader, 1, code, NULL);
	glCompileShader(_shader); //Compila

	//Tratar os erros

	glAttachShader(program, _shader); //Adiciona o código no programa que queremos executar, compilar shaders(?)
}

void adicionaPrograma() {
	shaderProgram = glCreateProgram(); //Cria programa completo (um triangulo)
	if (!shaderProgram) {
		printf("Erro ao criar o programa!");
		return;
	}

	adicionaTriangulo(shaderProgram, vertexShader, GL_VERTEX_SHADER); //Compila código do nosso programa, cria exe em memória
	adicionaTriangulo(shaderProgram, fragmentShader, GL_FRAGMENT_SHADER); //Compila o 
	glLinkProgram(shaderProgram);
}


//Programa principal
int main() {
	//Iniciar o GLFW (cria janela)
	if (!glfwInit()) {
		printf("GLFW não foi iniciado!");
		glfwTerminate();
		return 1;
	}

	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE); 
	glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE); //Glew gerencia conforme a arquitetura da placa de vídeo para as variáveis
	
	//Classe janela
	GLFWwindow *window = glfwCreateWindow(WIDTH, HEIGHT, "OpenGL", NULL, NULL); //Vai retornar o endereço de memória onde a janela está, window vai ser um ponteiro


	if (!window) {
		printf("Erro ao criar a janela!");
		glfwTerminate();
		return 1;
	}

	//Pegar dados da janela
	int bufferWidth, bufferHeight;
	glfwGetFramebufferSize(window, &bufferWidth, &bufferHeight);
	glfwMakeContextCurrent(window);

	glewExperimental = GL_TRUE; 
	if (glewInit() != GLEW_OK) {
		printf("GLEW não foi iniciado!");
		glfwDestroyWindow(window);
		glfwTerminate();
		return 1;
	}

	glViewport(0, 0, bufferWidth, bufferHeight); //Coloca janela no meio

	criaTriangulo();
	adicionaPrograma();

	while (!glfwWindowShouldClose(window)) { //Vai verificar se a janela precisa ser fechada, vai verificar com o SO
		//Cor de fundo da janela
		glClearColor(1.0f, 0.0f, 0.0f, 1.0f); //RGB e canal alpha (transparencia)
		glfwPollEvents();
		glClear(GL_COLOR_BUFFER_BIT);

		//Altera cor do triangulo
		GLint uniformColor = glGetUniformLocation(shaderProgram, "triColor");
		printf("%d", uniformColor);
		glUniform3f(uniformColor, 1.0f, 0.0f, 0.0f);

		//Desenhando o triangulo
		glUseProgram(shaderProgram);
		glBindVertexArray(VAO);

		glDrawArrays(GL_TRIANGLES, 0, 3); //Triangulo começando na posição 0, com 3 pontos
			glBindVertexArray(0);



		glfwSwapBuffers(window);
	}

	glfwDestroyWindow(window);
	glfwTerminate();
	return 0;
}